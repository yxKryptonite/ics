                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f62806000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f72004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Yuxuan Kuang 2100013089
                            | # Describe how and why you modified the baseline code.
                            | # First, I add the instruction `iaddq` in the HCL file to replace `addq`.
                            | # Then I unroll the loop into 10 iterations.
                            | # For the remaining number: construct a trinary search tree to set jump.
                            | # The Trinary Tree is like:
                            | # 		  ROOT
                            | # 	   /   |    \
                            | #     l    3     r
                            | #    / \       / | \
                            | #   1   2    rl  6  rr
                            | #           / \     /|\
                            | #          4   5   7 8 9
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
                            | # tmp: r8, ...
0x032:                      | ncopy:
                            | 
                            | ##################################################################
0x032: 6300                 | 	xorq %rax,%rax
0x034: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx
0x03e: 720802000000000000   | 	jl root
                            | 	
0x047:                      | 	iter1:
0x047: 50870000000000000000 | 		mrmovq (%rdi), %r8
0x051: 50970800000000000000 | 		mrmovq 8(%rdi), %r9
0x05b: 40860000000000000000 | 		rmmovq %r8, (%rsi)
0x065: 6288                 | 		andq %r8, %r8
0x067: 717a00000000000000   | 		jle iter2
0x070: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x07a:                      | 	iter2:
0x07a: 50871000000000000000 | 		mrmovq 16(%rdi), %r8
0x084: 40960800000000000000 | 		rmmovq %r9, 8(%rsi)
0x08e: 6299                 | 		andq %r9, %r9
0x090: 71a300000000000000   | 		jle iter3
0x099: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x0a3:                      | 	iter3:
0x0a3: 50971800000000000000 | 		mrmovq 24(%rdi), %r9
0x0ad: 40861000000000000000 | 		rmmovq %r8, 16(%rsi)
0x0b7: 6288                 | 		andq %r8, %r8
0x0b9: 71cc00000000000000   | 		jle iter4
0x0c2: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x0cc:                      | 	iter4:
0x0cc: 50872000000000000000 | 		mrmovq 32(%rdi), %r8
0x0d6: 40961800000000000000 | 		rmmovq %r9, 24(%rsi)
0x0e0: 6299                 | 		andq %r9, %r9
0x0e2: 71f500000000000000   | 		jle iter5
0x0eb: c0f00100000000000000 | 		iaddq $1, %rax
                            | 	
0x0f5:                      | 	iter5:
0x0f5: 50972800000000000000 | 		mrmovq 40(%rdi), %r9
0x0ff: 40862000000000000000 | 		rmmovq %r8, 32(%rsi)
0x109: 6288                 | 		andq %r8, %r8
0x10b: 711e01000000000000   | 		jle iter6
0x114: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x11e:                      | 	iter6:
0x11e: 50873000000000000000 | 		mrmovq 48(%rdi), %r8
0x128: 40962800000000000000 | 		rmmovq %r9, 40(%rsi)
0x132: 6299                 | 		andq %r9, %r9
0x134: 714701000000000000   | 		jle iter7
0x13d: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x147:                      | 	iter7:
0x147: 50973800000000000000 | 		mrmovq 56(%rdi), %r9
0x151: 40863000000000000000 | 		rmmovq %r8, 48(%rsi)
0x15b: 6288                 | 		andq %r8, %r8
0x15d: 717001000000000000   | 		jle iter8
0x166: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x170:                      | 	iter8:
0x170: 50874000000000000000 | 		mrmovq 64(%rdi), %r8
0x17a: 40963800000000000000 | 		rmmovq %r9, 56(%rsi)
0x184: 6299                 | 		andq %r9, %r9
0x186: 719901000000000000   | 		jle iter9
0x18f: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x199:                      | 	iter9:
0x199: 50974800000000000000 | 		mrmovq 72(%rdi), %r9
0x1a3: 40864000000000000000 | 		rmmovq %r8, 64(%rsi)
0x1ad: 6288                 | 		andq %r8, %r8
0x1af: 71c201000000000000   | 		jle iter10
0x1b8: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x1c2:                      | 	iter10:
                            | 		# mrmovq 80(%rdi), %r8
0x1c2: 40964800000000000000 | 		rmmovq %r9, 72(%rsi)
0x1cc: 6299                 | 		andq %r9, %r9
0x1ce: 71e101000000000000   | 		jle loop
0x1d7: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x1e1:                      | 	loop:
0x1e1: c0f75000000000000000 | 		iaddq $80, %rdi
0x1eb: c0f65000000000000000 | 		iaddq $80, %rsi
0x1f5: c0f2f6ffffffffffffff | 		iaddq $-10, %rdx
0x1ff: 754700000000000000   | 		jge iter1
                            | 
0x208:                      | 	root:
0x208: c0f20700000000000000 | 		iaddq $7, %rdx
0x212: 722d02000000000000   | 		jl left_child
0x21b: 765402000000000000   | 		jg right_child
0x224: 738b03000000000000   | 		je middle_child_r3
                            | 
0x22d:                      | 	left_child:
0x22d: c0f20200000000000000 | 		iaddq $2, %rdx
0x237: 73dd03000000000000   | 		je r1
0x240: c0f2ffffffffffffffff | 		iaddq $-1, %rdx
0x24a: 73b403000000000000   | 		je r2
0x253: 90                   | 		ret
                            | 
0x254:                      | 	right_child:
0x254: c0f2fdffffffffffffff | 		iaddq $-3, %rdx
0x25e: 768c02000000000000   | 		jg rr
0x267: 731003000000000000   | 		je r6
0x270: c0f20100000000000000 | 		iaddq $1, %rdx
0x27a: 733903000000000000   | 		je r5
0x283: 706203000000000000   | 		jmp r4
                            | 	
0x28c:                      | 	rr:
0x28c: c0f2feffffffffffffff | 		iaddq $-2, %rdx
0x296: 73be02000000000000   | 		je r8
0x29f: 72e702000000000000   | 		jl r7
                            | 
0x2a8:                      | 	r9:
0x2a8: 50874000000000000000 | 		mrmovq 64(%rdi), %r8
0x2b2: 40864000000000000000 | 		rmmovq %r8, 64(%rsi)
0x2bc: 6288                 | 		andq %r8, %r8
                            | 
0x2be:                      | 	r8:
0x2be: 50873800000000000000 | 		mrmovq 56(%rdi), %r8
0x2c8: 71db02000000000000   | 		jle r8_
0x2d1: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x2db:                      | 	r8_:
0x2db: 40863800000000000000 | 		rmmovq %r8, 56(%rsi)
0x2e5: 6288                 | 		andq %r8, %r8
                            | 
0x2e7:                      | 	r7:
0x2e7: 50873000000000000000 | 		mrmovq 48(%rdi), %r8
0x2f1: 710403000000000000   | 		jle r7_
0x2fa: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x304:                      | 	r7_:
0x304: 40863000000000000000 | 		rmmovq %r8, 48(%rsi)
0x30e: 6288                 | 		andq %r8, %r8
                            | 
0x310:                      | 	r6:
0x310: 50872800000000000000 | 		mrmovq 40(%rdi), %r8
0x31a: 712d03000000000000   | 		jle r6_
0x323: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x32d:                      | 	r6_:
0x32d: 40862800000000000000 | 		rmmovq %r8, 40(%rsi)
0x337: 6288                 | 		andq %r8, %r8
                            | 
0x339:                      | 	r5:
0x339: 50872000000000000000 | 		mrmovq 32(%rdi), %r8
0x343: 715603000000000000   | 		jle r5_
0x34c: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x356:                      | 	r5_:
0x356: 40862000000000000000 | 		rmmovq %r8, 32(%rsi)
0x360: 6288                 | 		andq %r8, %r8
                            | 
0x362:                      | 	r4:
0x362: 50871800000000000000 | 		mrmovq 24(%rdi), %r8
0x36c: 717f03000000000000   | 		jle r4_
0x375: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x37f:                      | 	r4_:
0x37f: 40861800000000000000 | 		rmmovq %r8, 24(%rsi)
0x389: 6288                 | 		andq %r8, %r8
                            | 
0x38b:                      | 	middle_child_r3:
0x38b: 50871000000000000000 | 		mrmovq 16(%rdi), %r8
0x395: 71a803000000000000   | 		jle r3_
0x39e: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x3a8:                      | 	r3_:
0x3a8: 40861000000000000000 | 		rmmovq %r8, 16(%rsi)
0x3b2: 6288                 | 		andq %r8, %r8
                            | 
0x3b4:                      | 	r2:
0x3b4: 50870800000000000000 | 		mrmovq 8(%rdi), %r8
0x3be: 71d103000000000000   | 		jle r2_
0x3c7: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x3d1:                      | 	r2_:
0x3d1: 40860800000000000000 | 		rmmovq %r8, 8(%rsi)
0x3db: 6288                 | 		andq %r8, %r8
                            | 
0x3dd:                      | 	r1:
0x3dd: 50870000000000000000 | 		mrmovq (%rdi), %r8
0x3e7: 71fa03000000000000   | 		jle r1_
0x3f0: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
0x3fa:                      | 	r1_:
0x3fa: 40860000000000000000 | 		rmmovq %r8, (%rsi)
0x404: 6288                 | 		andq %r8, %r8
0x406: 711904000000000000   | 		jle Done
0x40f: c0f00100000000000000 | 		iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x419:                      | Done:
0x419: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x41a:                      | End:
                            | #/* $end ncopy-ys */
0x41a:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x420:                      | 	.align 8
0x420:                      | src:
0x420: 0100000000000000     | 	.quad 1
0x428: 0200000000000000     | 	.quad 2
0x430: fdffffffffffffff     | 	.quad -3
0x438: fcffffffffffffff     | 	.quad -4
0x440: fbffffffffffffff     | 	.quad -5
0x448: faffffffffffffff     | 	.quad -6
0x450: 0700000000000000     | 	.quad 7
0x458: 0800000000000000     | 	.quad 8
0x460: 0900000000000000     | 	.quad 9
0x468: 0a00000000000000     | 	.quad 10
0x470: f5ffffffffffffff     | 	.quad -11
0x478: f4ffffffffffffff     | 	.quad -12
0x480: f3ffffffffffffff     | 	.quad -13
0x488: f2ffffffffffffff     | 	.quad -14
0x490: f1ffffffffffffff     | 	.quad -15
0x498: f0ffffffffffffff     | 	.quad -16
0x4a0: 1100000000000000     | 	.quad 17
0x4a8: 1200000000000000     | 	.quad 18
0x4b0: edffffffffffffff     | 	.quad -19
0x4b8: 1400000000000000     | 	.quad 20
0x4c0: ebffffffffffffff     | 	.quad -21
0x4c8: eaffffffffffffff     | 	.quad -22
0x4d0: 1700000000000000     | 	.quad 23
0x4d8: 1800000000000000     | 	.quad 24
0x4e0: 1900000000000000     | 	.quad 25
0x4e8: e6ffffffffffffff     | 	.quad -26
0x4f0: e5ffffffffffffff     | 	.quad -27
0x4f8: e4ffffffffffffff     | 	.quad -28
0x500: e3ffffffffffffff     | 	.quad -29
0x508: 1e00000000000000     | 	.quad 30
0x510: 1f00000000000000     | 	.quad 31
0x518: 2000000000000000     | 	.quad 32
0x520: dfffffffffffffff     | 	.quad -33
0x528: deffffffffffffff     | 	.quad -34
0x530: ddffffffffffffff     | 	.quad -35
0x538: 2400000000000000     | 	.quad 36
0x540: dbffffffffffffff     | 	.quad -37
0x548: daffffffffffffff     | 	.quad -38
0x550: 2700000000000000     | 	.quad 39
0x558: d8ffffffffffffff     | 	.quad -40
0x560: 2900000000000000     | 	.quad 41
0x568: d6ffffffffffffff     | 	.quad -42
0x570: d5ffffffffffffff     | 	.quad -43
0x578: d4ffffffffffffff     | 	.quad -44
0x580: 2d00000000000000     | 	.quad 45
0x588: 2e00000000000000     | 	.quad 46
0x590: d1ffffffffffffff     | 	.quad -47
0x598: 3000000000000000     | 	.quad 48
0x5a0: 3100000000000000     | 	.quad 49
0x5a8: 3200000000000000     | 	.quad 50
0x5b0: 3300000000000000     | 	.quad 51
0x5b8: ccffffffffffffff     | 	.quad -52
0x5c0: 3500000000000000     | 	.quad 53
0x5c8: 3600000000000000     | 	.quad 54
0x5d0: c9ffffffffffffff     | 	.quad -55
0x5d8: 3800000000000000     | 	.quad 56
0x5e0: c7ffffffffffffff     | 	.quad -57
0x5e8: c6ffffffffffffff     | 	.quad -58
0x5f0: 3b00000000000000     | 	.quad 59
0x5f8: c4ffffffffffffff     | 	.quad -60
0x600: 3d00000000000000     | 	.quad 61
0x608: 3e00000000000000     | 	.quad 62
0x610: 3f00000000000000     | 	.quad 63
0x618: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x620:                      | 	.align 16
0x620:                      | Predest:
0x620: fadebc0000000000     | 	.quad 0xbcdefa
0x628:                      | dest:
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8: abefcd0000000000     | 	.quad 0xcdefab
0x7f0: abefcd0000000000     | 	.quad 0xcdefab
0x7f8: abefcd0000000000     | 	.quad 0xcdefab
0x800: abefcd0000000000     | 	.quad 0xcdefab
0x808: abefcd0000000000     | 	.quad 0xcdefab
0x810: abefcd0000000000     | 	.quad 0xcdefab
0x818: abefcd0000000000     | 	.quad 0xcdefab
0x820:                      | Postdest:
0x820: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x828:                      | .align 8
                            | # Run time stack
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
0x848: 0000000000000000     | 	.quad 0
0x850: 0000000000000000     | 	.quad 0
0x858: 0000000000000000     | 	.quad 0
0x860: 0000000000000000     | 	.quad 0
0x868: 0000000000000000     | 	.quad 0
0x870: 0000000000000000     | 	.quad 0
0x878: 0000000000000000     | 	.quad 0
0x880: 0000000000000000     | 	.quad 0
0x888: 0000000000000000     | 	.quad 0
0x890: 0000000000000000     | 	.quad 0
0x898: 0000000000000000     | 	.quad 0
0x8a0: 0000000000000000     | 	.quad 0
                            | 
0x8a8:                      | Stack:
